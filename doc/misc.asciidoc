== Misc. modules

Not everything fits into the main documentation. We encourage you to also look at the _javadocs_
and _golodocs_.

The next subsections provide summaries of misc. modules found as part of Golo.

=== Standard augmentations (`gololang.StandardAugmentations`) ===

This Golo module provides standard augmentations for various classes of the Java standard classes
and Golo types. It does not have to be imported explicitely.

Here are a few examples.

Java collections can be have functional methods:

[source,golo]
----
println(list[1, 2, 3, 4]: filter(|n| -> (n % 2) == 0))
println(list[1, 2, 3]: map(|n| -> n * 10))
----

Insert a map entry only if the key is not present, and get a default value if an entry is missing:

[source,golo]
----
map: putIfAbsent(key, -> expensiveOperation())
map: getOrElse(key, "n/a")
----

Repeat an operation many times:

[source,golo]
----
3: times(-> println("Hey!")
3: times(|i| -> println(i))
----

Function references are method handles, and there are augmentations for them:

[source,golo]
----
# Composition
let f = |x| -> x + 1
let g = |y| -> y * 10
let h = f: andThen(g)

# Partial application
let adder = |x, y| -> x + y
let add2 = adder: bindAt(1, 2)    # binds 'y'
println(add2(1))
----

=== JSON support (`gololang.JSON`)

Golo includes the https://code.google.com/p/json-simple/[JSON Simple] library to provide JSON
support.

While `json-simple` only supports encoding from lists and maps, this API brings support for sets,
arrays, Golo tuples, dynamic objects and structs.

Given a simple data structure, we can obtain a JSON representation:

[source,golo]
----
let data = map[
  ["name", "Somebody"],
  ["age", 69],
  ["friends", list[
    "Mr Bean", "John B", "Larry"
  ]]
]
let asText = JSON.stringify(data)
----

Given some JSON as text, we can get back a data structure:

[source,golo]
----
let data = JSON.parse(text)
println(data: get("name"))
----

The `gololang.JSON` module also provides helpers for JSON serialization and deserialization
with both dynamic objects and structs.

=== Scala-like dynamic variable (`gololang.DynamicVariable`)

Golo has a `DynamicVariable` type that mimics the eponymous class from the Scala standard library.

A dynamic variable has inheritable thread-local semantics: updates to its value are confined to the
current thread and its future child threads.

Given the following code:

[source,golo]
----
let dyn = DynamicVariable("Foo")
println(dyn: value())

let t1 = Thread({
  dyn: withValue(666, {
    println(dyn: value())
  })
})

let t2 = Thread({
  dyn: withValue(69, {
    println(dyn: value())
  })
})

t1: start()
t2: start()
t1: join()
t2: join()
println(dyn: value())
----

one gets an output similar to:

----
Foo
69
666
Foo
----

with the `69` and `666` swapping order over runs.

=== Observable references (`gololang.Observable`)

An observable value notifies observers of updates in a thread-safe manner. An observable can also be
constructed from another observable using the `map` and `filter` combinators:

[source,golo]
----
let foo = Observable("Foo")
foo: onChange(|value, oldValue| -> println("foo = " + value + " old foo = " + oldValue))

let mapped = foo: map(|value, oldValue| -> value + "!" + " (old)" + oldValue + "!")
mapped: onChange(|value, oldValue| -> println("mapped = " + value))

foo: set("69")

println("current = " + foo: get())
----

This yields the following output:

----
foo = 69 old foo = Foo
mapped = 69! (old)Foo!
current = 69
----

=== Asynchronous programming helpers (`gololang.Async`) ===

This module offers asynchronous programming helpers, especially execution context agnostic promises
and futures. The provided APIs are orthogonal to the execution strategy: it is up to you to execute
code from the same thread, from a separate thread, or by pushing new tasks to a service executor.

Here is an example:

[source,golo]
----
module samples.Concurrency

import java.util.concurrent
import gololang.Async

local function fib = |n| {
  if n <= 1 {
    return n
  } else {
    return fib(n - 1) + fib(n - 2)
  }
}

function main = |args| {
  let executor = Executors.newFixedThreadPool(2)
  let results = [30, 34, 35, 38, 39, 40, 41, 42]: 
    map(|n| -> executor: enqueue(-> fib(n)):
      map(|res| -> [n, res]))
  reduce(results, "", |acc, next| -> acc + next: get(0) + " -> " + next: get(1) + "\n"):
    onSet(|s| -> println("Results:\n" + s)):
    onFail(|e| -> e: printStackTrace())
  executor: shutdown()
  executor: awaitTermination(120_L, TimeUnit.SECONDS())
}
----

This example takes advantages of an executor augmentation and composable promises and futures to
compute Fibonacci numbers.

