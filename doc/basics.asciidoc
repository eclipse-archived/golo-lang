== Basics ==

Let us start with the Golo basics.

=== Editor / IDE support ===

Editor and IDE support for Golo is available for:

- https://github.com/jponge/vim-golo[Vim]
- https://github.com/k33g/sublime-golo[Sublime Text 2]
- https://github.com/k33g/golo-storm[IntelliJ IDEA (syntax highthing)]

=== Hello world ===

Golo source code need to be placed in _modules_. Module names are
separated with dots, as in:

[source,text]
-------------
Foo
foo.Bar
foo.bar.Baz
(...)
-------------

It is suggested yet not enforced that the first elements in a module
name are in lowercase, and that the last one have an uppercase first
letter.

A Golo module can be executable if it has a _function_ named `main` and
that takes an argument for the JVM program arguments:

[source,text]
------------------------- 
module hello.World

function main = |args| {
  println("Hello world!")
}
-------------------------

`println` is a predefined function that outputs a value to the standard
console. As you can easily guess, here we output `Hello, world!` and
that is an awesome achievement.

=== Running _"Hello world"_ with `gologolo` ===

Of course, we need to run this incredibly complex application.

Golo comes with a `gologolo` script found in the distribution `bin/`
folder. Provided that it is available from your current `$PATH`, you may
simply invoke it as follows:

[source,console]
----------------------------------
$ gologolo samples/helloworld.golo
Hello world!
$
----------------------------------

`gologolo` takes several Golo source files as input. It expects the last
one to have a `main` function to call. The Golo code is compiled on the
fly and executed straight into a JVM.

You may also pass arguments to the `main` function by appending `--args`
on the command line invocation. Suppose that we have a module `EchoArgs`
as follows:

[source,text]
------------------------------------------------- 
module EchoArgs

function main = |args| {
  for (var i = 0, i < alength(args), i = i + 1) {
    println("#" + i + " -> " + aget(args, i))
  }
}
-------------------------------------------------

We may invoke it as follows:

[source,console]
-----------------------------------------------------
$ gologolo samples/echo-args.golo --args plop da plop
#0 -> plop
#1 -> da
#2 -> plop
$
-----------------------------------------------------

Note that `args` is expected to be an array, and we can use built-in
functions to deal with it: `alength` gives the length of an array while
`aget` gives the value of an element at a given index.

=== Compiling Golo source code ===

Golo comes with a `goloc` compiler that generates JVM bytecode in
`.class` files. We will give more details in the chapter on
interoperability with Java.

Compiling Golo files is straightforward:

[source,console]
-----------------------------------------------
$ goloc -output classes samples/helloworld.golo
$
-----------------------------------------------

This compiles the code found in `samples/helloworld.golo` and outputs
the generated classes to a `classes` folder (it will be created if
needed):

[source,console]
-------------------
$ tree classes/
classes/
└── hello
    └── World.class

1 directory, 1 file
$
-------------------

=== Running compiled Golo code ===

Golo provides a `golo` command for running compiled Golo code:

[source,console]
------------------
$ cd classes
$ golo hello.World
Hello world!
$
------------------

Simple, isn't it?

=== Passing JVM-specific flags ===

Both `golo` and `gologolo` can be given JVM-specific flags using the `JAVA_OPTS` environment
variable. 

As an example, the following runs `fibonacci.golo` and prints JIT compilation along the way:

[source,console]
----
# Exporting an environment variable
$ export JAVA_OPTS=-XX:+PrintCompilation
$ gologolo samples/fibonacci.golo

# ...or you may use this one-liner
$ JAVA_OPTS=-XX:+PrintCompilation gologolo samples/fibonacci.golo
----

=== Comments ===

Golo comments start with a `#`, just like in Bash, Python or Ruby:

[source,text]
----
# This is a comment
println("WTF?") # it works here, too
----

=== Variables and constants ===

Golo does not check for types at compile time, and they are not
declared. Everything happens at runtime in Golo.

Variables are declared using the `var` keyword, while constants are
declared with `let`. It is strongly advised that you favour `let` over
`var` unless you are certain that you need mutability.

Variables and constants need to be initialized when declared. Failing to
do so results in a compilation error.

Here are a few examples:

[source,text]
----
# Ok
var i = 3
i = i + 1

# The assignment fails because truth is a constant
let truth = 42
truth = 666

# Invalid statement, variables / constants have to be initialized
var foo
----

Valid names contain upper and lower case letters within the `[a..z]` range, underscores (`_`),
dollar symbols (`$`) and numbers. In any case, an identifier must not start with a number.

[source,text]
----
# Ok, but not necessarily great for humans...
let _$_f_o_$$666 = 666

# Wrong!
let 666_club = 666
----

=== Data literals ===

Golo supports a set of data literals. They directly map to their counterparts from the Java Standard
API. We give them along with examples in <<data-literals,the data literals table>> below.

[options="header",id="data-literals"]
|===
|Java type | Golo literals

|`null` | `null`

|`java.lang.Boolean` | `true` or `false`

|`java.lang.String` | `"hello world"`

|`java.lang.Character` | `'a'`, `'b'`, ...

|`java.lang.Integer` | `123`, `-123`, ...

|`java.lang.Long` | `123_L`, `-123_L`, ...

|`java.lang.Double` | `1.234`, `-1.234`, `1.234e9`, ...

|`java.lang.Float` | `1.234_F`, `-1.234_F`, `1.234e9_F`, ...

|`java.lang.Class` | `String.class`, `java.lang.String.class`, `gololang.Predef.module`, ...

| `java.lang.invoke.MethodHandle` | `^foo`, `^some.module::foo`, ...

|===

=== Operators ===

Golo supports the following <<operators,set of operators>>.

[options="header",id="operators"]
|===
|Symbol(s) |Description |Examples

|`+`|
Addition on numbers and strings.|
`1 + 2` gives 3.

`"foo" + "bar"` gives `"foobar"`.

`"foo" + something` where `something` is any object instance is equivalent to
`"foo" + something.toString()` in Java.

|`-`|
Subtraction on numbers.|
`4 - 1` gives `3`.

|`*`|
Multiplication on numbers and strings.|
`2 * 2` gives `4`.

`"a" * 3` gives `"aaa"`.

|`/`|
Division on numbers.|
`4 / 2` gives `2`.

|'%'|
Modulo on numbers.|
`4 % 2` gives `0`, `3 % 2` gives `1`.

|`"<"`, `"<="`, `"=="`, `"!="`, `">"`, `">="`|
Comparison between numbers and objects that implement `java.lang.Comparable`.
`==` is equivalent to calling `Object#equals(Object)` in Java.|
`1 < 2` gives `true`.

|`is`, `isnt`|
Comparison of reference equality.|
`a is b` gives `true` only if `a` and `b` reference the same object instance.

|`and`, `or`, `not`|
Boolean operators. `not` is of course a unary operator.|
`true and true` gives `true`, `not(true)` gives `false`.

|`oftype`|
Checks the type of an object instance, equivalent to the `instanceof` operator
in Java.|
`("plop" oftype String.class)` gives `true`.

|===

=== Calling a method ===

Although we will discuss this in more details later on, you should already know that `:` is used to
invoke instance methods.

You could for instance call the `toString()` method that any Java object has, and print it out as
follows:

[source,text]
----
println(123: toString())
println(someObject: toString())
----

