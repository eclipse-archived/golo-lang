== Predefined functions ==

Every Golo module definition comes with `gololang.Predefined` as a default import. It provides
useful functions.

=== Console output ===

`print` and `println` do just what you would expect.

[source,text]
----
print("Hey")
println()

println("Hey")
----

=== Exceptions ===

`raise` can be used to throw a `java.lang.RuntimeException`. It comes in two forms: one with a
message as a string, and one with a message and a cause.

[source,text]
----
raise("Somehow something is wrong")

try {
  ...
} catch (e) {
  ...
  raise("Something was wrong, and here is the cause", e)
}
----

=== Preconditions ===

Preconditions are useful, especially in a dynamically-typed language.

`require` can check for a boolean expression along with an error message. In case of error, it
throws an `AssertionError`.

[source,text]
----
function foo = |a| {
  require(a oftype String.class, "a must be a String")
  ...
}
----

You may also use `requireNotNull` that... well... checks that its argument is not `null`:

[source,text]
----
function foo = |a| {
  requireNotNull(a)
  ...
}
----

=== Arrays (deprecated) ===

Golo provides functions to deal with Java arrays (`Object[]`).

* the `Array` function takes a variable number of arguments and returns a Java array from them,
* the `aget` function takes an array and an index to return the element at that position,
* the `aset` function takes an array, an index and a value to set the element at that position,
* the `alength` function returns the length of an array,
* the `atoList` function calls the `java.util.Arrays.asList(values...)` method.

[source,text]
----
let a = Array(1, 2, 3)
require(alength(a) == 3, "a must be of length 3")
require(aget(a, 0) == 1, "the first element shall be 1")
aset(a, 0, 666)
require(aget(a, 0) == 666, "the new first element shall be 666")
----

WARNING: Those functions were introduced for the needs of the early developments of Golo. They will
be removed at some point before the release of version 0, so please use the corresponding array
object methods instead: `get`, `set`, `length`, ...

=== Ranges ===

The `range` function yields an iterable range over either `Integer` or `Long` bounds:

[source,text]
----
# Prints 1 2 (...) 100
foreach (i in range(1, 101)) {
  print(i + " ")
}
----

The lower bound is inclusive, the upper bound is exclusive.

=== Closures ===

Given a closure reference or a method handle, one can convert it to an instance of an interface with
a single method declaration, as in:

[source,text]
----
local function listener = |handler| -> asInterfaceInstance(ActionListener.class, handler)

# (...)
let button = JButton("Click me!")
button: addActionListener(listener(|event| -> println("Clicked!")))
----

It is possible to test if an object is a closure or not with the `isClosure` function. This is
useful to support values and delayed evaluation, as in:

[source,text]
----
if isClosure(value) {
  map: put(key, value())
} else {
  map: put(key, value)
}
----

You can get a reference to a closure using the predefined `fun` function:

[source,text]
----
import golotest.Closures

local function local_fun = |x| -> x + 1

function call_local_fun = {
  let f = fun("local_fun", golotest.Closures.module)
  return f(1)
}
----

Because functions may be overloaded, there is a form that accepts an extra parameter for specifying
the number of parameters:

[source,text]
----
import golotest.Closures

local function local_fun = |x| -> x + 1

function call_local_fun = {
  let f = fun("local_fun", golotest.Closures.module, 1)
  return f(1)
}
----

=== Misc. ===

`mapEntry` gives instances of `java.util.AbstractMap.SimpleEntry`, and is used as follows:

[source,text]
----
let e = mapEntry("foo", "bar")

# prints "foo => bar"
println(e: getKey() + " => " + e: getValue())
----

