help = Affiche ce message
usage = Commande dont l\u2019usage sera affich\u00e9

source_files = Fichiers source Golo (*.golo ou r\u00e9pertoires)
classpath = \u00c9l\u00e9ments du classpath (.jar et dossiers)
main_module = Le module Golo contenant la fonction principale (`main`)
arguments = Arguments du programme

doc = G\u00e9n\u00e8re la documentation du fichier source Golo
doc.format = Format de la documentation (html, markdown, ctags)
doc.output = R\u00e9pertoire de sortie de la documentation. Avec le format `ctags`, '-' peut \u00eatre utilis\u00e9 pour la sortie standard (p.ex. lorsqu\u2019ex\u00e9cut\u00e9 dans un \u00e9diteur)

check = V\u00e9rifie la validit\u00e9 d\u2019un fichier Golo
check.exit = Termine l\u2019ex\u00e9cution \u00e0 la premi\u00e8re erreur, ou continue avec le fichier suivant
check.verbose = Augmente le niveau de verbosit\u00e9

compile = Compile les fichiers source Golo
compile.output = Dossier de sortie des classes compil\u00e9es ou archive Jar

diagnose = Outil de diagnostique pour les repr\u00e9sentations internes de Golo
diagnose.tool = Outil \u00e0 utiliser: {ast, ir} (obsol\u00e8te)
diagnose.stage = \u00c9tape de compilation \u00e0 analyser: {ast, raw, refined}

golo = Charge et ex\u00e9cute dynamiquement des fichiers source
golo.files = Fichiers source Golo (*.golo ou r\u00e9pertoires). Le dernier doit contenir une fonction `main` ou alors utilisez `--module`

new = Cr\u00e9e des nouveaux projets Golo
new.path = Chemin pour les projets
new.type = Type des projets: {maven, gradle, simple}
new.names = Noms des nouveaux projets

run = Ex\u00e9cute du code Golo compil\u00e9

version = Affiche la version de Golo
version.full = Affiche la totalit\u00e9 des informations de version.
