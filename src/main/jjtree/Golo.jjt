/*
 * Copyright 2012-2014 Institut National des Sciences Appliqu√©es de Lyon (INSA-Lyon)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ............................................................................................. //

options {
  MULTI = true;
  VISITOR = true;
  STATIC = false;
  NODE_CLASS = "GoloASTNode";
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
  TOKEN_EXTENDS = "fr.insalyon.citi.golo.compiler.parser.GoloTokenBase";
  TRACK_TOKENS = true;
  COMMON_TOKEN_ACTION = true;
}

// ............................................................................................. //

PARSER_BEGIN(GoloParser)

package fr.insalyon.citi.golo.compiler.parser;

import java.util.List;
import java.util.LinkedList;
import java.util.LinkedHashSet;
import java.util.Collections;

import fr.insalyon.citi.golo.compiler.utils.StringUnescaping;
import fr.insalyon.citi.golo.compiler.utils.StringBlockIndenter;
import fr.insalyon.citi.golo.compiler.GoloCompilationException;

public class GoloParser {

  public GoloCompilationException.Builder exceptionBuilder;

  void skipto(int kind, ParseException e, GoloASTNode node) throws ParseException {
    if (exceptionBuilder == null) {
      throw e;
    }
    exceptionBuilder.report(e, node);
    if ("<EOF>".equals(e.tokenImage[0])) {
      return;
    }
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != kind);
  }

  public static class ParserClassRef {

    public String name;

    public ParserClassRef(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return "Class<" + name + ">";
    }
  }

  public static class FunctionRef {
    
    public String module;
    public String name;

    public FunctionRef(String module, String name) {
      this.module = module;
      this.name = name;
    }

    @Override
    public String toString() {
      return "FunctionRef{module=" + module + ",name=" + name + "}";
    }
  }
}

PARSER_END(GoloParser)

// ............................................................................................. //

// White space
SKIP :
{
  " "
  | "\t"
  | "\r"
  | "\f"
}

TOKEN :
{
  < NEWLINE: "\n" >
}

// Escaping
SKIP :
{
  < ESCAPE: "`" > : ESCAPED
}

// Keywords
TOKEN :
{
  < MODULE: "module" >
  |
  < IMPORT: "import" >
  |
  < FUNCTION: "function" >
  |
  < LOCAL: "local" >
  |
  < RETURN: "return" >
  |
  < IF: "if" >
  |
  < ELSE: "else" >
  |
  < WHILE: "while" >
  |
  < FOR: "for" >
  |
  < FOREACH: "foreach">
  |
  < IN: "in" >
  |
  < THROW: "throw" >
  |
  < TRY: "try" >
  |
  < CATCH: "catch" >
  |
  < FINALLY: "finally" >
  |
  < CASE: "case" >
  |
  < WHEN: "when" >
  |
  < MATCH: "match" >
  |
  < THEN: "then" >
  |
  < OTHERWISE: "otherwise" >
  |
  < AUGMENT: ("augment" | "pimp") >
  |
  < BREAK: "break" >
  |
  < CONTINUE: "continue" >
  |
  < STRUCT: "struct" >
}

// Operators
TOKEN :
{
  < ASSOCIATIVE_OPERATOR: ("*" | "/" | "%" |
                           "<" | "<=" | "==" | "!=" | ">" | ">=" | 
                           "is" | "isnt" |
                           "oftype" ) >
  |
  < COMMUTATIVE_OPERATOR: ("+" | "-" |
                           "and" | "or" |
                           "orIfNull" ) >
  |
  < UNARY_OPERATOR: "not" >
  |
  < INVOCATION: (":" | "?:") >
}

// References
TOKEN :
{
  < VAR: "var" >
  |
  < LET: "let" >
}

// Literals
TOKEN :
{
  < NUMBER: ("-")? ["0"-"9"] (("_")? ["0"-"9"])* >
  |
  < LONG_NUMBER: <NUMBER> "_L" >
  |
  < FLOATING_NUMBER: ("-")? (["0"-"9"])+ ("." (["0"-"9"])+)? ("e" (["0"-"9"])+)? >
  |
  < FLOAT: <FLOATING_NUMBER> "_F" >
  |
  < CHAR: "'" (~["\n", "\r", "\""]) "'" >
  |
  < NULL: "null" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < CLASSREF: <IDENTIFIER> ("." <IDENTIFIER>)* (".class" | ".module") >
  |
  < FUNREF: "^" (<IDENTIFIER> ("." <IDENTIFIER>)* "::")? <IDENTIFIER> >
  |
  < COLL_START: ("array" | "list" | "set" | "map" | "vector" | "tuple" )? "[" >
}

// String
// String
TOKEN:
{
  < START_QUOTE: "\"" > : WithinString
}

<WithinString>
TOKEN:
{
  < STRING_PART: (~["\"", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""])) >
  |
  < INTERPOLATION_START: "${" > : WithinInterpolation
  |
  < END_QUOTE: "\"" > : DEFAULT
}

<WithinInterpolation>
TOKEN:
{
  <INTERPOLATION_END: "}"> : WithinString
}

// Multiline strings

<DEFAULT>
MORE :
{
  "\"\"\"" : WithinMultiString
}

<WithinMultiString>
MORE :
{
   < (~[]) | ("\\" "\"") >
}

<WithinMultiString>
TOKEN :
{
  < MULTI_STRING : "\"\"\"" > : DEFAULT
}

// Identifiers
<DEFAULT,WithinInterpolation>
TOKEN :
{
  < IDENTIFIER: <LETTER> (<ID_REST>)* >
  |
  < #LETTER: [ "A"-"Z", "a"-"z", "_", "$" ] >
  |
  < #ID_REST: [ "A"-"Z", "a"-"z", "_", "$", "0"-"9" ] >
}

<ESCAPED>
TOKEN :
{
  < ESCAPED_IDENTIFIER: <ESCAPED_LETTER> (<ESCAPED_ID_REST>)* > : DEFAULT
  |
  < #ESCAPED_LETTER: [ "A"-"Z", "a"-"z", "_", "$" ] >
  |
  < #ESCAPED_ID_REST: [ "A"-"Z", "a"-"z", "_", "$", "0"-"9" ] >
}

// Comments
TOKEN :
{
  < COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
}

// Documentation

MORE :
{
  < "----" (" " | "\t")* ("\n" | "\r" | "\r\n") > : WithinDocumentation
}

<WithinDocumentation>
MORE :
{
  < ~[] >
}

<WithinDocumentation>
TOKEN :
{
  < DOCUMENTATION : "----" (" " | "\t")* ("\n" | "\r" | "\r\n") > : DEFAULT
}

// ............................................................................................. //

TOKEN_MGR_DECLS :
{
    public static interface TokenCompleter {
        void completeToken(Token t);
    }

    public TokenCompleter tokenCompleter = null;
    private Token lastToken = null;
    
    void CommonTokenAction(Token t) {
        t.previousToken = lastToken;
        if (tokenCompleter != null) {
            tokenCompleter.completeToken(t);
        }
        lastToken = t;
    }
}

// ............................................................................................. //

JAVACODE
void error() {
  throw generateParseException();
}

Token Identifier() #void:
{
  Token token;
}
{
  (
    token=<IDENTIFIER>
    |
    token=<ESCAPED_IDENTIFIER>
  )
  {
    return token;
  }
}

void BlankLine() #void:{}
{
  ( <NEWLINE> | <COMMENT> )
}

void BlankLines() #void: {}
{
  (BlankLine())*
}

String QualifiedName() #void:
{
  Token rootToken;
  Token nextToken;
  StringBuilder nameBuilder;
}
{
  rootToken=Identifier()
  {
    nameBuilder = new StringBuilder(rootToken.image);
  }
  (
    "." nextToken=Identifier()
    {
      nameBuilder.append(".").append(nextToken.image);
    }
  )*
  {
    return nameBuilder.toString();
  }
}

List<String> Arguments() #void:
{
  Token rootToken;
  Token nextToken;
  List<String> arguments = new LinkedList<String>();
}
{
  rootToken=Identifier()
  {
    arguments.add(rootToken.image);
  }
  (
    "," (BlankLine())? nextToken=Identifier()
    {
      arguments.add(nextToken.image);
    }
  )*
  {
    return arguments;
  }
}

void Interpolation() #void : {}
{
  <INTERPOLATION_START> ExpressionStatement() <INTERPOLATION_END>
}

void StringTemplate() :
{
  Token literal;
  StringBuilder buffer = new StringBuilder();
}
{
  (
    <START_QUOTE>
    (
      literal=<STRING_PART>
      {
        buffer.append(literal.image);
      }
      |
      Interpolation()
      {
        buffer.append(jjtThis.INTERPOLATION);
      }
    )*
    <END_QUOTE>
    {
      jjtThis.setTemplate(StringUnescaping.unescape(buffer.toString()));
    }
  )
  |
  (
    literal=<MULTI_STRING>
    {
      jjtThis.setTemplate(literal.image.substring(3, literal.image.length() - 3));
    }
  )
}

Character CharLiteral() #void:
{
  Token literal;
}
{
  literal=<CHAR>
  {
    return Character.valueOf(literal.image.charAt(1));
  }
}

Long LongLiteral() #void:
{
  Token literal;
}
{
  literal=<LONG_NUMBER>
  {
    String image = literal.image.substring(0, literal.image.length() - 2);
    return Long.valueOf(image.replace("_",""));
  }
}

Integer IntegerLiteral() #void:
{
  Token literal;
}
{
  literal=<NUMBER>
  {
    String image = literal.image.replace("_","");
    return Integer.valueOf(image);
  }
}

GoloParser.ParserClassRef ClassLiteral() #void:
{
  Token literal;
}
{
  literal=<CLASSREF>
  {
    String image = literal.image;
    int suffixLength = image.endsWith("class") ? 6 : 7;
    return new GoloParser.ParserClassRef(image.substring(0, image.length() - suffixLength));
  }
}

Double DoubleLiteral() #void:
{
  Token literal;
}
{
  literal=<FLOATING_NUMBER>
  {
    return Double.valueOf(literal.image);
  }
}

Float FloatLiteral() #void:
{
  Token literal;
}
{
  literal=<FLOAT>
  {
    return Float.valueOf(literal.image.substring(0, literal.image.length() - 2));
  }
}

GoloParser.FunctionRef FunctionRef() #void:
{
  Token literal;
}
{
  literal=<FUNREF>
  {
    String image = literal.image.substring(1);
    String[] parts = image.split("::");
    if (parts.length > 1) {
      return new GoloParser.FunctionRef(parts[0], parts[1]);
    } else {
      return new GoloParser.FunctionRef(null, parts[0]);
    }
  }
}

String Documentation() #void:
{
  Token token;
}
{
  token=<DOCUMENTATION>
  {
    String result = token.image.trim();
    result = result.substring(4, result.length() - 4);
    if (token.beginColumn > 1) {
      result = StringBlockIndenter.unindent(result, token.beginColumn - 1);
    }
    return result;
  }
}

// ............................................................................................. //

ASTCompilationUnit CompilationUnit(): {}
{
  try {
    ( 
      ( 
        BlankLines()
        ModuleDeclaration() BlankLines()
        ( ImportDeclaration() BlankLines() )*
        ( 
          try {
            ToplevelDeclaration() BlankLines() 
          }
          catch (ParseException e) {
            skipto(NEWLINE, e, jjtThis);
          }
        )*
      )
      |
      error()
    )
    <EOF>  
  }
  catch (ParseException e) {
    skipto(NEWLINE, e, jjtThis);
  }
  { return jjtThis; }
}

void ModuleDeclaration():
{
  String name;
  String documentation = null;
}
{
  (documentation=Documentation())?
  <MODULE> name=QualifiedName()
  {
    jjtThis.setName(name);
    jjtThis.setDocumentation(documentation);
  }
}

void ImportDeclaration():
{
  String name;
}
{
  try {
    <IMPORT> name=QualifiedName()
    {
      jjtThis.setName(name);
    }
  }
  catch (ParseException e) {
    skipto(NEWLINE, e, jjtThis);
  }
}

void ToplevelDeclaration():
{
  ASTFunctionDeclaration functionDecl;
  ASTAugmentDeclaration augmentDecl;
  ASTStructDeclaration structDecl;
  Token local = null;
  String documentation = null;
}
{
  (documentation=Documentation())?
  (
    augmentDecl=AugmentDeclaration()
    {
      augmentDecl.setDocumentation(documentation);
    }
    |
    (local=<LOCAL>)? functionDecl=FunctionDeclaration()
    {
      if (local != null) {
        functionDecl.setLocal(true);
      }
      functionDecl.setDocumentation(documentation);
    }
    |
    structDecl=StructDeclaration()
    {
      structDecl.setDocumentation(documentation);
    }
  )
}

ASTStructDeclaration StructDeclaration():
{
  Token name;
  Token member;
  LinkedHashSet<String> members = new LinkedHashSet<String>();
}
{
  <STRUCT> name=Identifier() "=" "{" BlankLines()
    member=Identifier() BlankLines()
    {
      members.add(member.image);
    }
    (
      "," BlankLines() member=Identifier() BlankLines()
      {
        members.add(member.image);
      }
    )*
  "}"
  {
    jjtThis.setName(name.image);
    jjtThis.setMembers(members);
    return jjtThis;
  }
}

ASTAugmentDeclaration AugmentDeclaration():
{
  String target;
  String documentation = null;
  ASTFunctionDeclaration func;
}
{
  <AUGMENT> target=QualifiedName() "{" BlankLines()
    ( 
      (documentation=Documentation())? func=FunctionDeclaration()
      {
        func.setAugmentation(true);
        func.setDocumentation(documentation);
        ASTFunction body = (ASTFunction) func.jjtGetChild(0);
        if (body.getArguments().isEmpty()) {
          String description = "Error: augmentation function " +
            func.getName() +
            " on " + 
            target + 
            " must take at least 1 argument ('this' would be a good idea...)";
          if (exceptionBuilder == null) {
            throw new TokenMgrError(description, 0);
          }
          exceptionBuilder.report(GoloCompilationException.Problem.Type.AUGMENT_FUNCTION_NO_ARGS, body, description);
        }
        documentation = null;
      }
      BlankLines() 
    )* 
  "}"
  {
    jjtThis.setTarget(target);
    return jjtThis;
  } 
}

ASTFunctionDeclaration FunctionDeclaration():
{
  Token name;
}
{
  <FUNCTION> name=Identifier() "=" Function()
  {
    jjtThis.setName(name.image);
    return jjtThis;
  }
}

// ............................................................................................. //

void Statement() #void:{}
{
  BlankLine() 
  |
  LOOKAHEAD(2) Assignment()
  |
  ExpressionStatement()
  | 
  Return() 
  |
  LetOrVar()
  |
  ConditionalBranching()
  |
  WhileLoop()
  |
  ForLoop()
  |
  ForEachLoop()
  |
  Throw()
  |
  TryCatchFinally()
  |
  Case()
  |
  Continue()
  |
  Break()
}

void Continue(): {}
{
  <CONTINUE>
}

void Break(): {}
{
  <BREAK>
}

void Throw(): {}
{
  <THROW> (BlankLine())? ExpressionStatement()
}

void WhileLoop(): {}
{
  <WHILE> ExpressionStatement() Block()
}

void ForLoop(): {}
{
  <FOR> "("  (BlankLine())? LetOrVar() ","
                   (BlankLine())? ExpressionStatement() "," 
                   (LOOKAHEAD(1) BlankLine())? Statement() ")"
  Block()
}

void ForEachLoop():
{
  Token elementId;
}
{
  <FOREACH>
  (
    (elementId=Identifier() <IN> ExpressionStatement())
    |
    ("(" elementId=Identifier() <IN> ExpressionStatement() ")")
  )
  Block()
  {
    jjtThis.setElementIdentifier(elementId.image);
  }
}

void TryCatchFinally():
{
  Token exceptionId;
}
{
  <TRY> Block()
  (
    (
      <FINALLY> Block()
      {
        jjtThis.setExceptionId(null);
      }
    )
    |
    (
      <CATCH> "(" exceptionId=Identifier() ")" Block()
      (<FINALLY> Block() )?
      {
        jjtThis.setExceptionId(exceptionId.image);
      }
    )
  )
}

void ExpressionStatement() #void: {}
{
  CommutativeExpression()
}

void TerminalExpression() #void: {}
{
  LOOKAHEAD(2) FunctionInvocation()
  |
  LOOKAHEAD(2) Reference()
  |
  Match()
  |
  StringTemplate()
  |
  Literal()
  |
  Function()
  |
  CollectionLiteral()
}

void UnaryExpression():
{
  Token token;
}
{
  token=<UNARY_OPERATOR> CommutativeExpression()
  {
    jjtThis.setOperator(token.image);
  }
}

void CommutativeExpression():
{
  Token token;
}
{
  AssociativeExpression()
  (
    LOOKAHEAD(2) (BlankLine())? token=<COMMUTATIVE_OPERATOR> (BlankLine())? AssociativeExpression()
    {
      jjtThis.addOperator(token.image);
    }
  )*
}

void AssociativeExpression():
{
  Token token;
}
{
  (
    "(" (BlankLine())? CommutativeExpression() (BlankLine())? ")"
    |
    TerminalExpression()
    |
    UnaryExpression()
  )
  (LOOKAHEAD(1) BlankLine())?
  (
    LOOKAHEAD(2)
    (
      token=<ASSOCIATIVE_OPERATOR> (BlankLine())? AssociativeExpression()
      {
        jjtThis.addOperator(token.image);
      }
    |
      (BlankLine())? token=<INVOCATION> (BlankLine())? MethodInvocation()
      {
        jjtThis.addOperator(token.image);
      }
    )
  )*
  (LOOKAHEAD(1) BlankLine())?
}

void MethodInvocation(): 
{
  Token token;
}
{
  token=Identifier() "("  (BlankLine())? (Expressions())? ")"
  (LOOKAHEAD(2) AnonymousFunctionInvocation())*
  {
    jjtThis.setName(token.image);
  }
}


void Block(): {}
{
  try { 
    "{"
    (
      try { 
        Statement()
      }
      catch (ParseException e) {
        skipto(NEWLINE, e, jjtThis);
      }
    )*
    "}"
  }
  catch (ParseException e) {
    skipto(NEWLINE, e, jjtThis);
  }
}

void Function():
{
  List<String> arguments = null;
  Token varargsToken = null;
  boolean compactForm = false;
}
{
  ("|" arguments=Arguments() (varargsToken="...")? "|")? 
  (
    Block()
    |
    ("->" (BlankLine())? ExpressionStatement())
    {
      compactForm = true;
    }
  )
  {
    if (arguments == null) {
      arguments = Collections.emptyList();
    }
    jjtThis.setCompactForm(compactForm);
    jjtThis.setArguments(arguments);
    jjtThis.setVarargs(varargsToken != null);
  }
}

void Literal():
{
  Object value;
}
{
  (
    value=ClassLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=CharLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=FloatLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=DoubleLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=LongLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=IntegerLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    <NULL>
    {
      jjtThis.setLiteralValue(null);
    }
    |
    <TRUE>
    {
      jjtThis.setLiteralValue(Boolean.TRUE);
    }
    |
    <FALSE>
    {
      jjtThis.setLiteralValue(Boolean.FALSE);
    }    
    |
    value=FunctionRef()
    {
      jjtThis.setLiteralValue(value);
    }
  )
}

void CollectionLiteral():
{
  Token token;
}
{
  token=<COLL_START> (BlankLine())?
  (
    ExpressionStatement() ("," (BlankLine())? ExpressionStatement())* (BlankLine())?
  )?
  "]"
  {
    String image = token.image;
    jjtThis.setType(image.substring(0, image.length() - 1));
    if (jjtThis.getType().isEmpty()) {
      jjtThis.setType("tuple");
    }
  }
}

void Reference():{}
{
  Identifier()
  {
    jjtThis.setName(jjtThis.jjtGetFirstToken().image);
  }
}

void LetOrVar():
{
  Token idToken;
}
{
  <LET> idToken=Identifier() "=" (BlankLine())? ExpressionStatement()
  {
    jjtThis.setType(ASTLetOrVar.Type.LET);
    jjtThis.setName(idToken.image);
  }
  |
  <VAR> idToken=Identifier() "=" (BlankLine())? ExpressionStatement()
  {
    jjtThis.setType(ASTLetOrVar.Type.VAR);
    jjtThis.setName(idToken.image);
  }
}

void Assignment():
{
  Token idToken;
}
{
  idToken=Identifier() "=" (BlankLine())? ExpressionStatement()
  {
    jjtThis.setName(idToken.image);
  }
}

void Return(): {}
{  
  <RETURN> (LOOKAHEAD(2) (BlankLine())? ExpressionStatement())?
}

void Expressions() #void: {}
{
  ExpressionStatement() ("," (BlankLine())? ExpressionStatement())*
}

void AnonymousFunctionInvocation(): {}
{
  "(" (BlankLine())? (Expressions())? ")"
}

void FunctionInvocation():
{
  String name;
}
{
  name=QualifiedName() "(" (BlankLine())? (Expressions())? ")"
  (LOOKAHEAD(2) AnonymousFunctionInvocation())*
  {
    jjtThis.setName(name);
  }
}

void ConditionalBranching(): {}
{
  <IF> ExpressionStatement() Block()
  ( LOOKAHEAD( <ELSE> )
    <ELSE>
    (
      ConditionalBranching()
     |
      Block()
    )
  )?
}

void Case(): {}
{
  <CASE> "{" BlankLines()
    ( <WHEN> ExpressionStatement() Block() BlankLines() )+
    <OTHERWISE> Block() BlankLines()
  "}"
}

void Match(): {}
{
  <MATCH> "{" BlankLines()
    ( <WHEN> BlankLines() ExpressionStatement() BlankLines()
      <THEN> BlankLines() ExpressionStatement() BlankLines() )+
    <OTHERWISE>  BlankLines() ExpressionStatement() BlankLines()
  "}"
}

// ............................................................................................. //
