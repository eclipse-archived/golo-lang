/*
 * Copyright (c) 2012-2016 Institut National des Sciences Appliqu√©es de Lyon (INSA-Lyon)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

// ............................................................................................. //

options {
  MULTI = true;
  VISITOR = true;
  STATIC = false;
  NODE_CLASS = "GoloASTNode";
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
  TOKEN_EXTENDS = "org.eclipse.golo.compiler.parser.GoloTokenBase";
  TRACK_TOKENS = true;
  COMMON_TOKEN_ACTION = true;
}

// ............................................................................................. //

PARSER_BEGIN(GoloParser)

package org.eclipse.golo.compiler.parser;

import java.util.List;
import java.util.LinkedList;
import java.util.LinkedHashSet;
import java.util.Collections;
import java.math.BigDecimal;
import java.math.BigInteger;

import org.eclipse.golo.compiler.utils.StringUnescaping;
import org.eclipse.golo.compiler.utils.StringBlockIndenter;
import org.eclipse.golo.compiler.GoloCompilationException;

public class GoloParser {

  public GoloCompilationException.Builder exceptionBuilder;

  private boolean errorAlreadyReported = false;

  void skipto(int kind, ParseException e, GoloASTNode node) throws ParseException {
    if (exceptionBuilder == null) {
      throw e;
    }
    if (!errorAlreadyReported) {
      exceptionBuilder.report(e, node);
      errorAlreadyReported = true;
    }
    if ("<EOF>".equals(e.tokenImage[0])) {
      return;
    }
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != kind);
  }

  public static class ParserClassRef {

    public String name;

    public ParserClassRef(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return "Class<" + name + ">";
    }
  }

  public static class FunctionRef {

    public String module;
    public String name;
    public int arity;
    public boolean varargs;

    public FunctionRef(String module, String name, int arity, boolean varargs) {
      this.module = module;
      this.name = name;
      this.arity = arity;
      this.varargs = varargs;
    }

    @Override
    public String toString() {
      return "FunctionRef{module=" + module
                          + ",name=" + name
                          + ",arity=" + arity 
                          + (varargs ? ",varargs" : "")
                          + "}";
    }
  }
}

PARSER_END(GoloParser)

// ............................................................................................. //

// White space
SKIP :
{
  " "
  | "\t"
  | "\r"
  | "\f"
}

TOKEN :
{
  < NEWLINE: "\n" >
}

// Escaping
SKIP :
{
  < ESCAPE: "`" > : ESCAPED
}

// Keywords
TOKEN :
{
  < MODULE: "module" >
  |
  < IMPORT: "import" >
  |
  < FUNCTION: "function" >
  |
  < LOCAL: "local" >
  |
  < RETURN: "return" >
  |
  < IF: "if" >
  |
  < ELSE: "else" >
  |
  < WHILE: "while" >
  |
  < FOR: "for" >
  |
  < FOREACH: "foreach">
  |
  < IN: "in" >
  |
  < THROW: "throw" >
  |
  < TRY: "try" >
  |
  < CATCH: "catch" >
  |
  < FINALLY: "finally" >
  |
  < CASE: "case" >
  |
  < WHEN: "when" >
  |
  < MATCH: "match" >
  |
  < THEN: "then" >
  |
  < OTHERWISE: "otherwise" >
  |
  < AUGMENT: ("augment" | "pimp") >
  |
  < NAMEDAUGMENTATION: "augmentation" >
  |
  < WITH: "with" >
  |
  < BREAK: "break" >
  |
  < CONTINUE: "continue" >
  |
  < STRUCT: "struct" >
  |
  < UNION: "union" >
}

// Operators
TOKEN :
{
  < MULTIPLICATIVE_OPERATOR: ("*" | "/" | "%") >
  |
  < ADDITIVE_OPERATOR: ("+" | "-") >
  |
  < RELATIONAL_OPERATOR: ("<" | "<=" | ">" | ">=" | "oftype") >
  |
  < EQUALITY_OPERATOR: ("==" | "!=" | "is" | "isnt") >
  |
  < AND_OPERATOR: "and" >
  |
  < OR_OPERATOR: "or" >
  |
  < OR_IFNULL_OPERATOR: "orIfNull" >
  |
  < UNARY_OPERATOR: "not" >
  |
  < INVOCATION: (":" | "?:") >
  |
  < CONSTANT_INVOCATION: "!" >
}

// Specials
TOKEN :
{
 < DECORATOR: "@" >
}

// References
TOKEN :
{
  < VAR: "var" >
  |
  < LET: "let" >
}

// Literals
TOKEN :
{
  < NUMBER: ("-")? ["0"-"9"] (("_")? ["0"-"9"])* >
  |
  < LONG_NUMBER: <NUMBER> "_L" >
  |
  < BIGINTEGER: <NUMBER> "_B" >
  |
  < FLOATING_NUMBER: <NUMBER> ("." ["0"-"9"] (("_")? ["0"-"9"])*)? ("e" ("-")? (["0"-"9"])+)? >
  |
  < FLOAT: <FLOATING_NUMBER> "_F" >
  |
  < BIGDECIMAL: <FLOATING_NUMBER> "_B" >
  |
  < STRING: "\"" (
    (~["\"", "\\", "\n", "\r"])
    |
    ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""]) )
  )* "\"" >
  |
  < CHAR: "'" (
    (~["\n", "\r", "\""])
    |
    ("\\" (["n", "t", "b", "r", "f", "\\", "'"]) )
  ) "'" >
  |
  < NULL: "null" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < CLASSREF: <IDENTIFIER> ("." <IDENTIFIER>)* (".class" | ".module") >
  |
  < FUNREF: "^" (<IDENTIFIER> ("." <IDENTIFIER>)* "::")? <IDENTIFIER> ("\\" <NUMBER>("...")?)?>
  |
  < COLL_START: ("array" | "list" | "set" | "map" | "vector" | "tuple" )? "[" >
}

// Multiline strings

<DEFAULT>
MORE :
{
  "\"\"\"" : WithinMultiString
}

<WithinMultiString>
MORE :
{
   < (~[]) | ("\\" "\"") >
}

<WithinMultiString>
TOKEN :
{
  < MULTI_STRING : "\"\"\"" > : DEFAULT
}

// Identifiers
<DEFAULT,ESCAPED>
TOKEN :
{
  < IDENTIFIER: <LETTER> (<ID_REST>)* > : DEFAULT
  |
  <#LETTER: ([
    "\u0024","\u0041"-"\u005A","\u005F","\u0061"-"\u007A","\u00A2"-"\u00A6",
    "\u00A9"-"\u00AA","\u00AC","\u00AE","\u00B0"-"\u00B1","\u00B5","\u00BA",
    "\u00C0"-"\u02AF","\u0370"-"\u0373","\u0376"-"\u0377","\u037B"-"\u037D",
    "\u0386","\u0388"-"\u0482","\u048A"-"\u0556","\u0561"-"\u0587","\u058F",
    "\u05D0"-"\u05F2","\u0606"-"\u0608","\u060B","\u060E"-"\u060F",
    "\u0620"-"\u063F","\u0641"-"\u064A","\u066E"-"\u066F","\u0671"-"\u06D3",
    "\u06D5","\u06DE","\u06E9","\u06EE"-"\u06EF","\u06FA"-"\u06FF","\u0710",
    "\u0712"-"\u072F","\u074D"-"\u07A5","\u07B1","\u07CA"-"\u07EA","\u07F6",
    "\u0800"-"\u0815","\u0840"-"\u0858","\u08A0"-"\u08AC","\u0904"-"\u0939",
    "\u093D","\u0950","\u0958"-"\u0961","\u0972"-"\u097F","\u0985"-"\u09B9",
    "\u09BD","\u09CE","\u09DC"-"\u09E1","\u09F0"-"\u09F3","\u09FA"-"\u09FB",
    "\u0A05"-"\u0A39","\u0A59"-"\u0A5E","\u0A72"-"\u0A74","\u0A85"-"\u0AB9",
    "\u0ABD","\u0AD0"-"\u0AE1","\u0AF1","\u0B05"-"\u0B39","\u0B3D",
    "\u0B5C"-"\u0B61","\u0B70"-"\u0B71","\u0B83"-"\u0BB9","\u0BD0",
    "\u0BF3"-"\u0BFA","\u0C05"-"\u0C3D","\u0C58"-"\u0C61","\u0C7F",
    "\u0C85"-"\u0CB9","\u0CBD","\u0CDE"-"\u0CE1","\u0CF1"-"\u0CF2",
    "\u0D05"-"\u0D3D","\u0D4E","\u0D60"-"\u0D61","\u0D79"-"\u0D7F",
    "\u0D85"-"\u0DC6","\u0E01"-"\u0E30","\u0E32"-"\u0E33","\u0E3F"-"\u0E45",
    "\u0E81"-"\u0EB0","\u0EB2"-"\u0EB3","\u0EBD"-"\u0EC4","\u0EDC"-"\u0F03",
    "\u0F13","\u0F15"-"\u0F17","\u0F1A"-"\u0F1F","\u0F34","\u0F36","\u0F38",
    "\u0F40"-"\u0F6C","\u0F88"-"\u0F8C","\u0FBE"-"\u0FC5","\u0FC7"-"\u0FCF",
    "\u0FD5"-"\u0FD8","\u1000"-"\u102A","\u103F","\u1050"-"\u1055",
    "\u105A"-"\u105D","\u1061","\u1065"-"\u1066","\u106E"-"\u1070",
    "\u1075"-"\u1081","\u108E","\u109E"-"\u10FA","\u10FD"-"\u135A",
    "\u1380"-"\u13F4","\u1401"-"\u166C","\u166F"-"\u167F","\u1681"-"\u169A",
    "\u16A0"-"\u16EA","\u16EE"-"\u1711","\u1720"-"\u1731","\u1740"-"\u1751",
    "\u1760"-"\u1770","\u1780"-"\u17B3","\u17DB"-"\u17DC","\u1820"-"\u1842",
    "\u1844"-"\u18A8","\u18AA"-"\u191C","\u1940","\u1950"-"\u19AB",
    "\u19C1"-"\u19C7","\u19DE"-"\u1A16","\u1A20"-"\u1A54","\u1B05"-"\u1B33",
    "\u1B45"-"\u1B4B","\u1B61"-"\u1B6A","\u1B74"-"\u1B7C","\u1B83"-"\u1BA0",
    "\u1BAE"-"\u1BAF","\u1BBA"-"\u1BE5","\u1C00"-"\u1C23","\u1C4D"-"\u1C4F",
    "\u1C5A"-"\u1C77","\u1CE9"-"\u1CEC","\u1CEE"-"\u1CF1","\u1CF5"-"\u1D2B",
    "\u1D6B"-"\u1D77","\u1D79"-"\u1D9A","\u1E00"-"\u1FBC","\u1FBE",
    "\u1FC2"-"\u1FCC","\u1FD0"-"\u1FDB","\u1FE0"-"\u1FEC","\u1FF2"-"\u1FFC",
    "\u203F"-"\u2040","\u2044","\u2052","\u2054","\u207A"-"\u207C",
    "\u208A"-"\u208C","\u20A0"-"\u20BA","\u2100"-"\u214F","\u2160"-"\u2188",
    "\u2190"-"\u2328","\u232B"-"\u244A","\u249C"-"\u24E9","\u2500"-"\u2767",
    "\u2794"-"\u27C4","\u27C7"-"\u27E5","\u27F0"-"\u2982","\u2999"-"\u29D7",
    "\u29DC"-"\u29FB","\u29FE"-"\u2C7B","\u2C7E"-"\u2CEE","\u2CF2"-"\u2CF3",
    "\u2D00"-"\u2D67","\u2D80"-"\u2DDE","\u2E80"-"\u2FFB","\u3004",
    "\u3006"-"\u3007","\u3012"-"\u3013","\u3020"-"\u3029","\u3036"-"\u303A",
    "\u303C","\u303E"-"\u3096","\u309F","\u30A1"-"\u30FA","\u30FF"-"\u3191",
    "\u3196"-"\u321E","\u322A"-"\u3247","\u3250","\u3260"-"\u327F",
    "\u328A"-"\u32B0","\u32C0"-"\uA014","\uA016"-"\uA4F7","\uA500"-"\uA60B",
    "\uA610"-"\uA61F","\uA62A"-"\uA66E","\uA680"-"\uA697","\uA6A0"-"\uA6EF",
    "\uA722"-"\uA76F","\uA771"-"\uA787","\uA78B"-"\uA7AA","\uA7FA"-"\uA801",
    "\uA803"-"\uA805","\uA807"-"\uA80A","\uA80C"-"\uA822","\uA828"-"\uA82B",
    "\uA836"-"\uA873","\uA882"-"\uA8B3","\uA8F2"-"\uA8F7","\uA8FB",
    "\uA90A"-"\uA925","\uA930"-"\uA946","\uA960"-"\uA97C","\uA984"-"\uA9B2",
    "\uAA00"-"\uAA28","\uAA40"-"\uAA42","\uAA44"-"\uAA4B","\uAA60"-"\uAA6F",
    "\uAA71"-"\uAA7A","\uAA80"-"\uAAAF","\uAAB1","\uAAB5"-"\uAAB6",
    "\uAAB9"-"\uAABD","\uAAC0","\uAAC2"-"\uAADC","\uAAE0"-"\uAAEA","\uAAF2",
    "\uAB01"-"\uABE2","\uAC00"-"\uD7FB","\uF900"-"\uFB1D","\uFB1F"-"\uFBB1",
    "\uFBD3"-"\uFD3D","\uFD50"-"\uFDFD","\uFE33"-"\uFE34","\uFE4D"-"\uFE4F",
    "\uFE62","\uFE64"-"\uFE66","\uFE69","\uFE70"-"\uFEFC","\uFF04","\uFF0B",
    "\uFF1C"-"\uFF1E","\uFF21"-"\uFF3A","\uFF3F","\uFF41"-"\uFF5A","\uFF5C",
    "\uFF5E","\uFF66"-"\uFF6F","\uFF71"-"\uFF9D","\uFFA0"-"\uFFE2",
    "\uFFE4"-"\uFFEE","\uFFFC"-"\uFFFD"])
    | ("\uD800" [
      "\uDC00"-"\uDCFA","\uDD37"-"\uDD74","\uDD79"-"\uDD89","\uDD90"-"\uDDFC",
      "\uDE80"-"\uDF1E","\uDF30"-"\uDF9D","\uDFA0"-"\uDFCF","\uDFD1"-"\uDFD5"])
    | ("\uD801" [
      "\uDC00"-"\uDC9D"])
    | ("\uD802" [
      "\uDC00"-"\uDC55","\uDD00"-"\uDD15","\uDD20"-"\uDD39","\uDD80"-"\uDE00",
      "\uDE10"-"\uDE33","\uDE60"-"\uDE7C","\uDF00"-"\uDF35","\uDF40"-"\uDF55",
      "\uDF60"-"\uDF72"])
    | ("\uD803" [
      "\uDC00"-"\uDC48"])
    | ("\uD804" [
      "\uDC03"-"\uDC37","\uDC83"-"\uDCAF","\uDCD0"-"\uDCE8","\uDD03"-"\uDD26",
      "\uDD83"-"\uDDB2","\uDDC1"-"\uDDC4"])
    | ("\uD805" [
      "\uDE80"-"\uDEAA"])
    | ("\uD808" [
      "\uDC00"-"\uDF6E"])
    | ("\uD809" [
      "\uDC00"-"\uDC62"])
    | ("\uD80C" [
      "\uDC00"-"\uDFFF"])
    | ("\uD80D" [
      "\uDC00"-"\uDC2E"])
    | ("\uD81A" [
      "\uDC00"-"\uDE38"])
    | ("\uD81B" [
      "\uDF00"-"\uDF50"])
    | ("\uD82C" [
      "\uDC00"-"\uDC01"])
    | ("\uD834" [
      "\uDC00"-"\uDD64","\uDD6A"-"\uDD6C","\uDD83"-"\uDD84","\uDD8C"-"\uDDA9",
      "\uDDAE"-"\uDE41","\uDE45"-"\uDF56"])
    | ("\uD835" [
      "\uDC00"-"\uDFCB"])
    | ("\uD83B" [
      "\uDE00"-"\uDEF1"])
    | ("\uD83C" [
      "\uDC00"-"\uDCDF","\uDD10"-"\uDFF0"])
    | ("\uD83D" [
      "\uDC00"-"\uDF73"])
    | ("\uD840" [
      "\uDC00"])
    | ("\uD869" [
      "\uDED6"-"\uDF00"])
    | ("\uD86D" [
      "\uDF34"-"\uDF40"])
    | ("\uD86E" [
      "\uDC1D"])
    | ("\uD87E" [
      "\uDC00"-"\uDE1D"])
  >
  |
  <#ID_REST: ["0"-"9"] | <LETTER> >
}

// Comments
TOKEN :
{
  < COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
}

// Documentation

MORE :
{
  < "----" (" " | "\t")* ("\n" | "\r" | "\r\n") > : WithinDocumentation
}

<WithinDocumentation>
MORE :
{
  < ~[] >
}

<WithinDocumentation>
TOKEN :
{
  < DOCUMENTATION : "----" (" " | "\t")* ("\n" | "\r" | "\r\n") > : DEFAULT
}

// Everything else
<DEFAULT,ESCAPED,WithinDocumentation,WithinMultiString>
TOKEN :
{
  < INVALID: ~[" ","\t","\r","\f","`", ".", ":", "{", "}", "|", "(", ")", "=", ",", "]", "-"] > : DEFAULT
}

// ............................................................................................. //

TOKEN_MGR_DECLS :
{
    public static interface TokenCompleter {
        void completeToken(Token t);
    }

    public TokenCompleter tokenCompleter = null;
    private Token lastToken = null;

    void CommonTokenAction(Token t) {
        t.previousToken = lastToken;
        if (tokenCompleter != null) {
            tokenCompleter.completeToken(t);
        }
        lastToken = t;
    }
}

// ............................................................................................. //

JAVACODE
void error() {
  throw generateParseException();
}

void BlankLine() #void:{}
{
  ( <NEWLINE> | <COMMENT> )
}

void BlankLines() #void: {}
{
  (BlankLine())*
}

String QualifiedName() #void:
{
  Token rootToken;
  Token nextToken;
  StringBuilder nameBuilder;
}
{
  rootToken=<IDENTIFIER>
  {
    nameBuilder = new StringBuilder(rootToken.image);
  }
  (
    "." nextToken=<IDENTIFIER>
    {
      nameBuilder.append(".").append(nextToken.image);
    }
  )*
  {
    return nameBuilder.toString();
  }
}

List<String> Parameters() #void:
{
  Token rootToken;
  Token nextToken;
  List<String> parameters = new LinkedList<String>();
}
{
  rootToken=<IDENTIFIER>
  {
    parameters.add(rootToken.image);
  }
  (
    "," (BlankLine())? nextToken=<IDENTIFIER>
    {
      parameters.add(nextToken.image);
    }
  )*
  {
    return parameters;
  }
}

List<String> AugmentationNames() #void:
{
  String rootToken;
  String nextToken;
  List<String> names = new LinkedList<String>();
}
{
  rootToken=QualifiedName()
  {
    names.add(rootToken);
  }
  (
    "," (BlankLine())? nextToken=QualifiedName()
    {
      names.add(nextToken);
    }
  )*
  {
    return names;
  }
}


String StringLiteral() #void:
{
  Token literal;
}
{
  (
    literal=<STRING>
    {
      return StringUnescaping.unescape(literal.image.substring(1, literal.image.length() - 1));
    }
  )
  |
  (
    literal=<MULTI_STRING>
    {
      return literal.image.substring(3, literal.image.length() - 3);
    }
  )
}

Character CharLiteral() #void:
{
  Token literal;
}
{
  literal=<CHAR>
  {
    return Character.valueOf(StringUnescaping.unescape(literal.image.substring(1, literal.image.length() - 1)).charAt(0));
  }
}

Long LongLiteral() #void:
{
  Token literal;
}
{
  literal=<LONG_NUMBER>
  {
    String image = literal.image.substring(0, literal.image.length() - 2);
    return Long.valueOf(image.replace("_",""));
  }
}

BigInteger BigIntegerLiteral() #void:
{
  Token literal;
}
{
  literal=<BIGINTEGER>
  {
    String image = literal.image.substring(0, literal.image.length() - 2);
    return new BigInteger(image.replace("_",""));
  }
}


Integer IntegerLiteral() #void:
{
  Token literal;
}
{
  literal=<NUMBER>
  {
    String image = literal.image.replace("_","");
    return Integer.valueOf(image);
  }
}

GoloParser.ParserClassRef ClassLiteral() #void:
{
  Token literal;
}
{
  literal=<CLASSREF>
  {
    String image = literal.image;
    int suffixLength = image.endsWith("class") ? 6 : 7;
    return new GoloParser.ParserClassRef(image.substring(0, image.length() - suffixLength));
  }
}

Double DoubleLiteral() #void:
{
  Token literal;
}
{
  literal=<FLOATING_NUMBER>
  {
    return Double.valueOf(literal.image.replace("_", ""));
  }
}

Float FloatLiteral() #void:
{
  Token literal;
}
{
  literal=<FLOAT>
  {
    return Float.valueOf(literal.image
        .substring(0, literal.image.length() - 2)
        .replace("_", ""));
  }
}

BigDecimal BigDecimalLiteral() #void:
{
  Token literal;
}
{
  literal=<BIGDECIMAL>
  {
    return new BigDecimal(literal.image
        .substring(0, literal.image.length() - 2)
        .replace("_", ""));
  }
}

GoloParser.FunctionRef FunctionRef() #void:
{
  Token literal;
}
{
  literal=<FUNREF>
  {
    String module = null;
    String name;
    int arity = -1;
    boolean varargs = false;
    String[] parts = literal.image.substring(1).split("::");
    if (parts.length > 1) {
      module = parts[0];
      name = parts[1];
    } else {
      name = parts[0];
    }
    parts = name.split("\\\\");
    if (parts.length > 1) {
      name = parts[0];
      if (parts[1].endsWith("...")) {
        arity = Integer.valueOf(parts[1].substring(0, parts[1].length() - 3));
        varargs = true;
      } else {
        arity = Integer.valueOf(parts[1]);
      }
    }
    return new GoloParser.FunctionRef(module, name, arity, varargs);
  }
}

String Documentation() #void:
{
  Token token;
}
{
  token=<DOCUMENTATION>
  {
    String result = token.image.trim();
    result = result.substring(4, result.length() - 4);
    if (token.beginColumn > 1) {
      result = StringBlockIndenter.unindent(result, token.beginColumn - 1);
    }
    return result;
  }
}

// ............................................................................................. //

ASTCompilationUnit CompilationUnit(): {}
{
  try {
    (
      (
        BlankLines()
        ModuleDeclaration() BlankLines()
        ( ImportDeclaration() BlankLines() )*
        (
          try {
            ToplevelDeclaration() BlankLines()
          }
          catch (ParseException e) {
            skipto(NEWLINE, e, jjtThis);
          }
        )*
      )
      |
      error()
    )
    <EOF>
  }
  catch (ParseException e) {
    skipto(NEWLINE, e, jjtThis);
  }
  { return jjtThis; }
}

void ModuleDeclaration():
{
  String name;
  String documentation = null;
}
{
  (documentation=Documentation())?
  <MODULE> name=QualifiedName()
  {
    jjtThis.setName(name);
    jjtThis.setDocumentation(documentation);
  }
}

void ImportDeclaration():
{
  String name;
}
{
  try {
    <IMPORT> name=QualifiedName()
    {
      jjtThis.setName(name);
    }
  }
  catch (ParseException e) {
    skipto(NEWLINE, e, jjtThis);
  }
}

void ToplevelDeclaration():
{
  ASTFunctionDeclaration functionDecl;
  ASTAugmentDeclaration augmentDecl;
  ASTStructDeclaration structDecl;
  ASTUnionDeclaration unionDecl;
  ASTNamedAugmentationDeclaration namedAugmentationDecl;
  ASTLetOrVar state;
  Token local = null;
  String documentation = null;
}
{
  (
    (documentation=Documentation())?
    (
      augmentDecl=AugmentDeclaration()
      {
        augmentDecl.setDocumentation(documentation);
      }
      |
      (DecoratorDeclaration())* (local=<LOCAL>)? functionDecl=FunctionDeclaration()
      {
        if (local != null) {
          functionDecl.setLocal(true);
        }
        functionDecl.setDocumentation(documentation);
      }
      |
      structDecl=StructDeclaration()
      {
        structDecl.setDocumentation(documentation);
      }
      |
      unionDecl=UnionDeclaration()
      {
        unionDecl.setDocumentation(documentation);
      }
      |
      namedAugmentationDecl=NamedAugmentationDeclaration()
      {
        namedAugmentationDecl.setDocumentation(documentation);
      }
    )
  )
  |
  state=LetOrVar()
  {
    state.setModuleState(true);
  }
}

ASTStructDeclaration StructDeclaration():
{
  Token name;
  Token member;
  LinkedHashSet<String> members = new LinkedHashSet<String>();
}
{
  <STRUCT> name=<IDENTIFIER> "=" "{" BlankLines()
    member=<IDENTIFIER> BlankLines()
    {
      members.add(member.image);
    }
    (
      "," BlankLines() member=<IDENTIFIER> BlankLines()
      {
        members.add(member.image);
      }
    )*
  "}"
  {
    jjtThis.setName(name.image);
    jjtThis.setMembers(members);
    return jjtThis;
  }
}

void UnionValue():
{
  Token name;
  Token member;
  LinkedHashSet<String> members = new LinkedHashSet<String>();
  String documentation = null;
}
{
  (documentation=Documentation())?
  name=<IDENTIFIER>
  ("=" "{" BlankLines()
    member=<IDENTIFIER> BlankLines()
    {
      members.add(member.image);
    }
    (
      "," BlankLines() member=<IDENTIFIER> BlankLines()
      {
        members.add(member.image);
      }
    )*
  "}")?
  {
    jjtThis.setName(name.image);
    jjtThis.setMembers(members);
    jjtThis.setDocumentation(documentation);
  }
}

ASTUnionDeclaration UnionDeclaration():
{
  Token name;
  Token valueName;
}
{
  <UNION> name=<IDENTIFIER> "=" "{" BlankLines()
  (
    UnionValue() BlankLines()
  )*
  "}"
  {
    jjtThis.setName(name.image);
    return jjtThis;
  }
}

void AugmentationDeclaration(String context) #void:
{
  String documentation = null;
  ASTFunctionDeclaration func;
}
{
  "{" BlankLines()
    (
      (documentation=Documentation())? (DecoratorDeclaration())* func=FunctionDeclaration()
      {
        func.setAugmentation(true);
        func.setDocumentation(documentation);
        ASTFunction body = (ASTFunction) func.jjtGetChild(0);
        if (body.getParameters().isEmpty()) {
          String description = "Error: augmentation function " +
            func.getName() + " " + context +
            " must take at least 1 argument ('this' would be a good idea...)";
          if (exceptionBuilder == null) {
            throw new TokenMgrError(description, 0);
          }
          exceptionBuilder.report(GoloCompilationException.Problem.Type.AUGMENT_FUNCTION_NO_ARGS, body, description);
        }
        documentation = null;
      }
      BlankLines()
    )*
  "}"
}

ASTNamedAugmentationDeclaration NamedAugmentationDeclaration():
{
  Token name;
}
{
  <NAMEDAUGMENTATION> name=<IDENTIFIER> "=" AugmentationDeclaration("in " + name)
  {
    jjtThis.setName(name.image);
    return jjtThis;
  }
}

ASTAugmentDeclaration AugmentDeclaration():
{
  String target;
  List<String> names = null;
}
{
  <AUGMENT> target=QualifiedName() (
    AugmentationDeclaration("on " + target)
    |
    (<WITH> names=AugmentationNames())
    )
  {
    jjtThis.setTarget(target);
    jjtThis.setAugmentationNames(names);
    return jjtThis;
  }
}

ASTFunctionDeclaration FunctionDeclaration():
{
  Token name;
}
{
  <FUNCTION> name=<IDENTIFIER> "=" Function()
  {
    jjtThis.setName(name.image);
    return jjtThis;
  }
}

ASTDecoratorDeclaration DecoratorDeclaration():
{
  Token constant = null;
}
{
  <DECORATOR>
  (constant=<CONSTANT_INVOCATION>)?
  (
    LOOKAHEAD(2) FunctionInvocation()
    |
    LOOKAHEAD(2) Reference()
  )
  BlankLines()
  {
    if (constant != null) {
        jjtThis.setConstant(true);
    }
    return jjtThis;
  }
}

// ............................................................................................. //

void Statement() #void:{}
{
  BlankLine()
  |
  LOOKAHEAD(2) Assignment()
  |
  LOOKAHEAD(3) DestructuringAssignment()
  |
  LOOKAHEAD(3) LetOrVar()
  |
  ExpressionStatement()
  |
  Return()
  |
  ConditionalBranching()
  |
  WhileLoop()
  |
  ForLoop()
  |
  ForEachLoop()
  |
  Throw()
  |
  TryCatchFinally()
  |
  Case()
  |
  Continue()
  |
  Break()
}

void Continue(): {}
{
  <CONTINUE>
}

void Break(): {}
{
  <BREAK>
}

void Throw(): {}
{
  <THROW> (BlankLine())? ExpressionStatement()
}

void WhileLoop(): {}
{
  <WHILE> ExpressionStatement() Block()
}

void ForLoop(): {}
{
  <FOR> "("  (BlankLine())? LetOrVar() ","
                   (BlankLine())? ExpressionStatement() ","
                   (LOOKAHEAD(1) BlankLine())? Statement() ")"
  (LOOKAHEAD(2) Block())?
}

void ForEachLoop():
{
  Token elementId;
  List<String> names;
  Token varargsToken = null;
}
{
  <FOREACH>
  (
    LOOKAHEAD(2)(
      (elementId=<IDENTIFIER> <IN> ExpressionStatement() (<WHEN> ExpressionStatement())?)
      |
      ("(" elementId=<IDENTIFIER> <IN> ExpressionStatement() (<WHEN> ExpressionStatement())? ")")
    )
    {
      jjtThis.setElementIdentifier(elementId.image);
    }
    |
    LOOKAHEAD(2)(
      (names=DestructuredNames()(varargsToken="...")? <IN> ExpressionStatement() (<WHEN> ExpressionStatement())?)
      |
      ("(" names=DestructuredNames()(varargsToken="...")? <IN> ExpressionStatement() (<WHEN> ExpressionStatement())? ")")
    )
    {
      jjtThis.setNames(names);
      jjtThis.setVarargs(varargsToken != null);
    }
  )
  (LOOKAHEAD(2) Block())?
}

void TryCatchFinally():
{
  Token exceptionId;
}
{
  <TRY> Block()
  (
    (
      <FINALLY> Block()
      {
        jjtThis.setExceptionId(null);
      }
    )
    |
    (
      <CATCH> "(" exceptionId=<IDENTIFIER> ")" Block()
      (<FINALLY> Block() )?
      {
        jjtThis.setExceptionId(exceptionId.image);
      }
    )
  )
}

void ExpressionStatement(): {}
{
  OrIfNullExpression() (LOOKAHEAD(1) BlankLine())?
}

void Atom() #void: {}
{
  LOOKAHEAD(2) FunctionInvocation()
  |
  LOOKAHEAD(2) Reference()
  |
  Match()
  |
  Literal()
  |
  Function()
  |
  CollectionLiteral()
  |
  "(" (BlankLine())? ExpressionStatement() (BlankLine())? ")"
}

void UnaryExpression() #void:
{
  Token token = null;
}
{
  (token=<UNARY_OPERATOR>)? InvocationExpression() #UnaryExpression(token != null)
}

void InvocationExpression() #void:
{
  Token token = null;
  ASTAnonymousFunctionInvocation anon = null;
}
{
  Atom()
  (
    LOOKAHEAD(2) (BlankLine())? token=<INVOCATION> (BlankLine())? MethodInvocation()
    {
      jjtThis.addOperator(token.image);
    }
  )* #InvocationExpression(token != null)
  (
    LOOKAHEAD(2) anon=AnonymousFunctionInvocation()
    {
      anon.setOnExpression(true);
    }
  )*
}

void MultiplicativeExpression() #void:
{
  Token token = null;
}
{
  UnaryExpression()
  (
    LOOKAHEAD(2) (BlankLine())? token=<MULTIPLICATIVE_OPERATOR> (BlankLine())? InvocationExpression()
    {
      jjtThis.addOperator(token.image);
    }
  )* #MultiplicativeExpression(token != null)
}

void AdditiveExpression() #void:
{
  Token token = null;
}
{
  MultiplicativeExpression()
  (
    LOOKAHEAD(2) (BlankLine())? token=<ADDITIVE_OPERATOR> (BlankLine())? MultiplicativeExpression()
    {
      jjtThis.addOperator(token.image);
    }
  )* #AdditiveExpression(token != null)
}

void RelationalExpression() #void:
{
  Token token = null;
}
{
  AdditiveExpression()
  (
    LOOKAHEAD(2) (BlankLine())? token=<RELATIONAL_OPERATOR>(BlankLine())?  AdditiveExpression()
    {
      jjtThis.setOperator(token.image);
    }
  )? #RelationalExpression(token != null)
}

void EqualityExpression() #void:
{
  Token token = null;
}
{
  RelationalExpression()
  (
    LOOKAHEAD(2) (BlankLine())? token=<EQUALITY_OPERATOR> (BlankLine())? RelationalExpression()
    {
      jjtThis.setOperator(token.image);
    }
  )? #EqualityExpression(token != null)
}

void AndExpression() #void:
{
  int count = 0;
}
{
  EqualityExpression()
  (
    LOOKAHEAD(2) (BlankLine())? <AND_OPERATOR> (BlankLine())? EqualityExpression()
    {
      jjtThis.increaseCount();
      count++;
    }
  )* #AndExpression(count > 0)
}

void OrExpression() #void:
{
  int count = 0;
}
{
  AndExpression()
  (
    LOOKAHEAD(2) (BlankLine())? <OR_OPERATOR> (BlankLine())? AndExpression()
    {
      jjtThis.increaseCount();
      count++;
    }
  )* #OrExpression(count > 0)
}

void OrIfNullExpression() #void:
{
  int count = 0;
}
{
  OrExpression()
  (
    LOOKAHEAD(2)(BlankLine())? <OR_IFNULL_OPERATOR> (BlankLine())? OrExpression()
    {
      jjtThis.increaseCount();
      count++;
    }
  )* #OrIfNullExpression(count > 0)
}

void MethodInvocation():
{
  Token token;
}
{
  token=<IDENTIFIER> "("  (BlankLine())? (Arguments())? ")"
  (LOOKAHEAD(2) AnonymousFunctionInvocation())*
  {
    jjtThis.setName(token.image);
  }
}

void Block(): {}
{
  try {
    "{"
    (
      try {
        Statement()
      }
      catch (ParseException e) {
        skipto(NEWLINE, e, jjtThis);
      }
    )*
    "}"
  }
  catch (ParseException e) {
    skipto(NEWLINE, e, jjtThis);
  }
}

void Function():
{
  List<String> parameters = null;
  Token varargsToken = null;
  boolean compactForm = false;
}
{
  ("|" parameters=Parameters() (varargsToken="...")? "|")?
  (
    Block()
    |
    ("->" (BlankLine())? ExpressionStatement())
    {
      compactForm = true;
    }
  )
  {
    if (parameters == null) {
      parameters = Collections.emptyList();
    }
    jjtThis.setCompactForm(compactForm);
    jjtThis.setParameters(parameters);
    jjtThis.setVarargs(varargsToken != null);
  }
}

void Literal():
{
  Object value;
}
{
  (
    value=ClassLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=StringLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=CharLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=BigDecimalLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=BigIntegerLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=FloatLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=DoubleLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=LongLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=IntegerLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    <NULL>
    {
      jjtThis.setLiteralValue(null);
    }
    |
    <TRUE>
    {
      jjtThis.setLiteralValue(Boolean.TRUE);
    }
    |
    <FALSE>
    {
      jjtThis.setLiteralValue(Boolean.FALSE);
    }
    |
    value=FunctionRef()
    {
      jjtThis.setLiteralValue(value);
    }
  )
}

void CollectionLiteral():
{
  Token token;
  boolean isRange = false;
  boolean isComprehension = false;
}
{
  token=<COLL_START> (BlankLine())?
  (
    ExpressionStatement()
    (
      ("," (BlankLine())? ExpressionStatement())+
      |
      ".." ExpressionStatement()
      {
        isRange = true;
      }
      |
      (ForEachLoop()|ForLoop())+
      {
        isComprehension = true;
      }
    )?
    (BlankLine())?
  )?
  "]"
  {
    String image = token.image;
    jjtThis.setType(image.substring(0, image.length() - 1));
    if (jjtThis.getType().isEmpty()) {
      jjtThis.setType("tuple");
    }
    if (isRange) {
      jjtThis.setType("range");
    }
    jjtThis.setComprehension(isComprehension);
  }
}

void Reference():{}
{
  <IDENTIFIER>
  {
    jjtThis.setName(jjtThis.jjtGetFirstToken().image);
  }
}

ASTDestructuringAssignment DestructuringAssignment():
{
  List<String> names;
  Token varargsToken = null;
}
{
  <LET> names=DestructuredNames() (varargsToken="...")? "=" (BlankLine())? ExpressionStatement()
  {
    jjtThis.setType(ASTLetOrVar.Type.LET);
    jjtThis.setNames(names);
    jjtThis.setVarargs(varargsToken != null);
    return jjtThis;
  }
  |
  <VAR> names=DestructuredNames() (varargsToken="...")? "=" (BlankLine())? ExpressionStatement()
  {
    jjtThis.setType(ASTLetOrVar.Type.VAR);
    jjtThis.setNames(names);
    jjtThis.setVarargs(varargsToken != null);
    return jjtThis;
  }
  |
  names=DestructuredNames() (varargsToken="...")? "=" (BlankLine())? ExpressionStatement()
  {
    jjtThis.setType(null);
    jjtThis.setNames(names);
    jjtThis.setVarargs(varargsToken != null);
    return jjtThis;
  }
}

List<String> DestructuredNames() #void:
{
  List<String> names = new LinkedList<String>();
  Token rootToken;
  Token nextToken;
}
{
  rootToken=<IDENTIFIER>
  {
    names.add(rootToken.image);
  }
  (
    "," (BlankLine())? nextToken=<IDENTIFIER>
    {
      names.add(nextToken.image);
    }
  )+
  {
    return names;
  }
}

ASTLetOrVar LetOrVar():
{
  Token idToken;
}
{
  <LET> idToken=<IDENTIFIER> "=" (BlankLine())? ExpressionStatement()
  {
    jjtThis.setType(ASTLetOrVar.Type.LET);
    jjtThis.setName(idToken.image);
    return jjtThis;
  }
  |
  <VAR> idToken=<IDENTIFIER> "=" (BlankLine())? ExpressionStatement()
  {
    jjtThis.setType(ASTLetOrVar.Type.VAR);
    jjtThis.setName(idToken.image);
    return jjtThis;
  }
}

void Assignment():
{
  Token idToken;
}
{
  idToken=<IDENTIFIER> "=" (BlankLine())? ExpressionStatement()
  {
    jjtThis.setName(idToken.image);
  }
}

void Return(): {}
{
  <RETURN> (LOOKAHEAD(2) (BlankLine())? ExpressionStatement())?
}

void Expressions() #void: {}
{
  ExpressionStatement() ("," (BlankLine())? ExpressionStatement())*
}

void Argument():
{
  Token parameterId = null;
  Token expression;
}
{
  (LOOKAHEAD(2) (parameterId=<IDENTIFIER> "="))? ExpressionStatement()
  {
    if (parameterId != null) {
      jjtThis.setName(parameterId.image);
      jjtThis.setNamed(true);
    }
  }
}

void Arguments() #void: {}
{
  Argument() ("," (BlankLine())? Argument())*
}

ASTAnonymousFunctionInvocation AnonymousFunctionInvocation():
{
  Token constant = null;
}
{
  (constant=<CONSTANT_INVOCATION>)? "(" (BlankLine())? (Arguments())? ")"
  {
    if (constant != null) {
      jjtThis.setConstant(true);
    }
    return jjtThis;
  }
}

void FunctionInvocation():
{
  String name;
  Token constant = null;
}
{
  name=QualifiedName() (constant=<CONSTANT_INVOCATION>)? "(" (BlankLine())? (Arguments())? ")"
  (LOOKAHEAD(2) AnonymousFunctionInvocation())*
  {
    jjtThis.setName(name);
    if (constant != null) {
      jjtThis.setConstant(true);
    }
  }
}

void ConditionalBranching(): {}
{
  <IF> ExpressionStatement() Block()
  ( LOOKAHEAD( <ELSE> )
    <ELSE>
    (
      ConditionalBranching()
     |
      Block()
    )
  )?
}

void Case(): {}
{
  <CASE> "{" BlankLines()
    ( <WHEN> ExpressionStatement() Block() BlankLines() )+
    <OTHERWISE> Block() BlankLines()
  "}"
}

void Match(): {}
{
  <MATCH> "{" BlankLines()
    ( <WHEN> BlankLines() ExpressionStatement() BlankLines()
      <THEN> BlankLines() ExpressionStatement() BlankLines() )+
    <OTHERWISE>  BlankLines() ExpressionStatement() BlankLines()
  "}"
}

// ............................................................................................. //
